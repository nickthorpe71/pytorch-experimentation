import torch.nn as nn


def Discriminator(num_channels, num_d_filters):
    """
    # The discriminator is a convolutional neural network that accepts
    # images of size num_channels x num_d_filters x num_d_filters as input, 
    # and outputs the probability that it assigns to the image being real, 
    # as opposed to being fake (generated by a generator network).
    """
    return nn.Sequential(
        nn.Conv2d(
            in_channels=num_channels,
            out_channels=num_d_filters,
            kernel_size=3,
            stride=1,
            padding=1,
            bias=False
        ),
        nn.LeakyReLU(negative_slope=0.2, inplace=True),

        nn.Conv2d(
            in_channels=num_d_filters,
            out_channels=num_d_filters * 2,
            kernel_size=3,
            stride=1,
            padding=1,
            bias=False
        ),
        nn.BatchNorm2d(num_features=num_d_filters * 2),
        nn.LeakyReLU(negative_slope=0.2, inplace=True),

        nn.Conv2d(
            in_channels=num_d_filters * 2,
            out_channels=num_d_filters * 4,
            kernel_size=3,
            stride=1,
            padding=1,
            bias=False
        ),
        nn.BatchNorm2d(num_features=num_d_filters * 4),
        nn.LeakyReLU(negative_slope=0.2, inplace=True),

        nn.Conv2d(
            in_channels=num_d_filters * 4,
            out_channels=num_d_filters * 8,
            kernel_size=3,
            stride=1,
            padding=1,
            bias=False
        ),
        nn.BatchNorm2d(num_features=num_d_filters * 8),
        nn.LeakyReLU(negative_slope=0.2, inplace=True),

        nn.Conv2d(
            in_channels=num_d_filters * 8,
            out_channels=1,
            kernel_size=3,
            stride=1,
            padding=0,
            bias=False
        ),
        nn.Sigmoid()
    )
